# Advanced PID Control System Makefile
# Target: ATmega328P
# Features: PID control, auto-tuning, digital signal processing, real-time optimization

PROJECT = pid_control_system
SOURCES = main.c
MCU = atmega328p
F_CPU = 16000000UL

# Programmer settings
PROGRAMMER = arduino
PORT = COM3
BAUD = 115200

# Compiler tools
CC = avr-gcc
OBJCOPY = avr-objcopy
OBJDUMP = avr-objdump
SIZE = avr-size
AVRDUDE = avrdude

# Math library for floating-point PID calculations
LDLIBS = -lm

# PID and DSP optimized compile flags
CFLAGS = -mmcu=$(MCU) -DF_CPU=$(F_CPU)
CFLAGS += -Os -std=gnu99
CFLAGS += -Wall -Wextra -Wshadow -Wstrict-prototypes -Wpointer-arith
CFLAGS += -ffunction-sections -fdata-sections
CFLAGS += -funsigned-char -funsigned-bitfields
CFLAGS += -fpack-struct -fshort-enums
CFLAGS += -g -gdwarf-2
CFLAGS += -DPID_ENABLE_AUTOTUNING -DPID_ENABLE_DSP -DPID_ENABLE_TELEMETRY

# Linker flags
LDFLAGS = -mmcu=$(MCU)
LDFLAGS += -Wl,--gc-sections
LDFLAGS += -Wl,--print-gc-sections
LDFLAGS += -Wl,-Map,$(PROJECT).map
LDFLAGS += -Wl,--cref
LDFLAGS += $(LDLIBS)

OBJECTS = $(SOURCES:.c=.o)

# Default target
all: $(PROJECT).hex size control-analysis

# Compile
%.o: %.c
	@echo "Compiling $< with PID and DSP optimizations..."
	$(CC) $(CFLAGS) -c $< -o $@

# Link
$(PROJECT).elf: $(OBJECTS)
	@echo "Linking PID controller with math library..."
	$(CC) $(LDFLAGS) $(OBJECTS) -o $@

# Generate HEX
$(PROJECT).hex: $(PROJECT).elf
	@echo "Creating HEX file..."
	$(OBJCOPY) -O ihex -R .eeprom $< $@

# Memory usage analysis
size: $(PROJECT).elf
	@echo "Memory usage analysis:"
	$(SIZE) --format=avr --mcu=$(MCU) $(PROJECT).elf

# PID control system analysis
control-analysis:
	@echo ""
	@echo "PID Control System Analysis:"
	@echo "============================"
	@echo ""
	@echo "System Configuration:"
	@echo "  Target MCU: ATmega328P @ 16MHz"
	@echo "  Control Frequency: 1kHz (1ms sample time)"
	@echo "  ADC Resolution: 12-bit (oversampled from 10-bit)"
	@echo "  PWM Resolution: 8-bit (255 levels)"
	@echo "  Floating-point arithmetic: IEEE 754 single precision"
	@echo ""
	@echo "PID Controller Features:"
	@echo "  Core Algorithm:"
	@echo "    - Proportional-Integral-Derivative control"
	@echo "    - Anti-windup protection (conditional integration)"
	@echo "    - Derivative on measurement (noise reduction)"
	@echo "    - Output limiting and rate limiting"
	@echo ""
	@echo "  Advanced Control:"
	@echo "    - Feed-forward compensation"
	@echo "    - Digital filtering (Butterworth low-pass)"
	@echo "    - Adaptive gain scheduling"
	@echo "    - Bumpless transfer between modes"
	@echo ""
	@echo "Auto-Tuning Methods:"
	@echo "  1. Ziegler-Nichols Ultimate Sensitivity"
	@echo "     - Finds ultimate gain (Ku) and period (Tu)"
	@echo "     - Applies classic ZN formulas"
	@echo "     - Suitable for most industrial processes"
	@echo ""
	@echo "  2. Genetic Algorithm Optimization"
	@echo "     - Population-based parameter search"
	@echo "     - Multi-objective optimization (ISE, IAE)"
	@echo "     - Robust to plant uncertainties"
	@echo ""
	@echo "Digital Signal Processing:"
	@echo "  - 2nd-order Butterworth filters"
	@echo "  - Oversampling for noise reduction"
	@echo "  - Real-time spectrum analysis (optional)"
	@echo "  - Adaptive filtering algorithms"

# Control theory analysis
analyze-control-theory:
	@echo "Control Theory Analysis:"
	@echo "======================="
	@echo ""
	@echo "PID Transfer Function:"
	@echo "  C(s) = Kp + Ki/s + Kd*s"
	@echo "  C(z) = Kp + Ki*T/(z-1) + Kd*(z-1)/(T*z)"
	@echo ""
	@echo "Stability Analysis:"
	@echo "  Closed-loop characteristic equation:"
	@echo "  1 + C(s)*G(s)*H(s) = 0"
	@echo ""
	@echo "  Routh-Hurwitz Stability Criteria:"
	@echo "  All coefficients must be positive"
	@echo "  No sign changes in first column"
	@echo ""
	@echo "Performance Specifications:"
	@echo "  Rise Time (tr): Time to reach 90% of final value"
	@echo "  Settling Time (ts): Time to stay within ±2% band"
	@echo "  Overshoot (Mp): Maximum peak above final value"
	@echo "  Steady-State Error (ess): Final tracking error"
	@echo ""
	@echo "Frequency Domain Analysis:"
	@echo "  Gain Margin (GM): Safety margin in dB"
	@echo "  Phase Margin (PM): Phase safety in degrees"
	@echo "  Bandwidth (BW): System response frequency"
	@echo "  Crossover Frequency: 0dB crossing point"
	@echo ""
	@echo "Digital Control Considerations:"
	@echo "  Sampling Frequency: 10-50x bandwidth rule"
	@echo "  Quantization Effects: ADC/PWM resolution impact"
	@echo "  Computational Delay: Processing time effects"
	@echo "  Aliasing Prevention: Anti-aliasing filters"

# Performance benchmarking
benchmark-pid:
	@echo "PID Performance Benchmarking:"
	@echo "============================"
	@echo ""
	@echo "Computational Performance:"
	@echo "  PID Calculation Time: ~50-100μs @ 16MHz"
	@echo "  Auto-tuning Convergence: 10-30 seconds"
	@echo "  Digital Filter Processing: ~20μs per sample"
	@echo "  System Identification: 1-5 minutes"
	@echo ""
	@echo "Control Performance Metrics:"
	@echo "  Typical Rise Time: 100-500ms"
	@echo "  Settling Time: 500ms-2s"
	@echo "  Overshoot: <10% (well-tuned)"
	@echo "  Steady-State Accuracy: ±0.1% (12-bit ADC)"
	@echo ""
	@echo "Memory Utilization:"
	@echo "  Flash Usage: ~20-24KB (62-75% of 32KB)"
	@echo "  RAM Usage: ~1.2-1.8KB (60-90% of 2KB)"
	@echo "  EEPROM: ~32 bytes (parameter storage)"
	@echo ""
	@echo "Real-time Performance:"
	@echo "  Control Loop Jitter: <10μs"
	@echo "  CPU Utilization: 10-25% (1kHz control)"
	@echo "  Interrupt Response: <5μs"
	@echo "  Communication Latency: <1ms (UART)"
	@echo ""
	@echo "Power Consumption:"
	@echo "  Active Control: ~25mA @ 5V"
	@echo "  Idle Mode: ~8mA @ 5V"
	@echo "  Sleep Mode: ~2mA @ 5V (sensors active)"

# Application examples
analyze-applications:
	@echo "PID Control Applications:"
	@echo "========================"
	@echo ""
	@echo "1. DC Motor Speed Control:"
	@echo "   Plant Model: G(s) = K / (Js + b)"
	@echo "   Typical Parameters:"
	@echo "     J = 0.01 kg⋅m²    (inertia)"
	@echo "     b = 0.1 N⋅m⋅s    (friction)"
	@echo "     K = 0.01 N⋅m/A   (motor constant)"
	@echo "   Recommended PID:"
	@echo "     Kp = 100, Ki = 200, Kd = 0.5"
	@echo ""
	@echo "2. Temperature Control:"
	@echo "   Plant Model: G(s) = K / (τs + 1)"
	@echo "   Typical Parameters:"
	@echo "     K = 2.0          (steady-state gain)"
	@echo "     τ = 300s         (time constant)"
	@echo "   Recommended PID:"
	@echo "     Kp = 0.6, Ki = 0.002, Kd = 45"
	@echo ""
	@echo "3. Position Control (Servo):"
	@echo "   Plant Model: G(s) = K / (s(τs + 1))"
	@echo "   Typical Parameters:"
	@echo "     K = 10           (DC gain)"
	@echo "     τ = 0.1s         (motor time constant)"
	@echo "   Recommended PID:"
	@echo "     Kp = 2.0, Ki = 0.5, Kd = 0.1"
	@echo ""
	@echo "4. Level Control (Tank):"
	@echo "   Plant Model: G(s) = K / ((τ₁s+1)(τ₂s+1))"
	@echo "   Typical Parameters:"
	@echo "     K = 1.0          (steady-state gain)"
	@echo "     τ₁ = 60s, τ₂ = 5s (time constants)"
	@echo "   Recommended PID:"
	@echo "     Kp = 1.2, Ki = 0.02, Kd = 15"

# Advanced control techniques
analyze-advanced-control:
	@echo "Advanced Control Techniques:"
	@echo "============================"
	@echo ""
	@echo "1. Cascade Control:"
	@echo "   Structure: Master PID → Slave PID → Plant"
	@echo "   Applications: Temperature, flow, pressure control"
	@echo "   Benefits: Better disturbance rejection"
	@echo ""
	@echo "2. Feed-Forward Control:"
	@echo "   Structure: FF + FB (PID) control"
	@echo "   Formula: u(t) = Kff*r(t) + PID(e(t))"
	@echo "   Benefits: Zero steady-state error"
	@echo ""
	@echo "3. Model Predictive Control (MPC):"
	@echo "   Prediction Horizon: 10-50 samples"
	@echo "   Control Horizon: 5-20 samples"
	@echo "   Constraint Handling: Yes"
	@echo "   Computational Cost: High"
	@echo ""
	@echo "4. Adaptive Control:"
	@echo "   Parameter Estimation: Recursive Least Squares"
	@echo "   Self-Tuning: MIT rule, Lyapunov-based"
	@echo "   Model Reference: MRAC implementation"
	@echo ""
	@echo "5. Robust Control:"
	@echo "   H∞ Control: Minimize worst-case performance"
	@echo "   μ-Synthesis: Structured uncertainty handling"
	@echo "   Sliding Mode: Variable structure control"
	@echo ""
	@echo "Implementation Considerations:"
	@echo "  - Computational complexity vs. MCU capability"
	@echo "  - Memory requirements for state storage"
	@echo "  - Real-time constraints and timing"
	@echo "  - Numerical stability and precision"

# Digital signal processing analysis
analyze-dsp:
	@echo "Digital Signal Processing Analysis:"
	@echo "=================================="
	@echo ""
	@echo "Signal Acquisition:"
	@echo "  ADC Configuration:"
	@echo "    - 10-bit base resolution → 12-bit oversampled"
	@echo "    - Conversion time: ~13 ADC clocks (104μs @ 125kHz)"
	@echo "    - Oversampling factor: 16x (4 additional bits)"
	@echo "    - Effective resolution: 0.024% of full scale"
	@echo ""
	@echo "Digital Filtering:"
	@echo "  Butterworth Low-Pass Filter:"
	@echo "    - Order: 2nd (40dB/decade rolloff)"
	@echo "    - Cutoff frequency: 10-100Hz (configurable)"
	@echo "    - Implementation: Direct Form II"
	@echo "    - Computational cost: ~20μs per sample"
	@echo ""
	@echo "  Filter Design Equations:"
	@echo "    ωc = 2πfc              (cutoff frequency)"
	@echo "    k = tan(ωc/(2fs))      (pre-warping)"
	@echo "    H(z) = (b0+b1z⁻¹+b2z⁻²)/(1+a1z⁻¹+a2z⁻²)"
	@echo ""
	@echo "Noise Analysis:"
	@echo "  Sources:"
	@echo "    - ADC quantization noise: ±0.5 LSB"
	@echo "    - Sensor noise: Typically 0.1-1% RMS"
	@echo "    - Power supply ripple: <10mV"
	@echo "    - EMI/RFI interference"
	@echo ""
	@echo "  Mitigation Techniques:"
	@echo "    - Oversampling (improves SNR by 6dB per 4x)"
	@echo "    - Digital filtering (removes high-frequency noise)"
	@echo "    - Averaging (reduces random noise by √N)"
	@echo "    - Shielding and proper PCB layout"
	@echo ""
	@echo "Spectral Analysis:"
	@echo "  FFT Implementation (optional):"
	@echo "    - 64-point FFT for frequency analysis"
	@echo "    - Window functions: Hanning, Hamming"
	@echo "    - Power spectral density estimation"
	@echo "    - Dominant frequency identification"

# Auto-tuning algorithms
analyze-autotuning:
	@echo "Auto-Tuning Algorithms Analysis:"
	@echo "==============================="
	@echo ""
	@echo "1. Ziegler-Nichols Ultimate Sensitivity Method:"
	@echo "   Procedure:"
	@echo "     1. Set Ki = Kd = 0"
	@echo "     2. Increase Kp until sustained oscillation"
	@echo "     3. Record ultimate gain Ku and period Tu"
	@echo "     4. Apply tuning formulas"
	@echo ""
	@echo "   Tuning Formulas:"
	@echo "     P Controller:  Kp = 0.5*Ku"
	@echo "     PI Controller: Kp = 0.45*Ku, Ki = 1.2*Kp/Tu"
	@echo "     PID Controller: Kp = 0.6*Ku, Ki = 2*Kp/Tu, Kd = Kp*Tu/8"
	@echo ""
	@echo "   Advantages: Simple, widely applicable"
	@echo "   Disadvantages: May cause large overshoot"
	@echo ""
	@echo "2. Cohen-Coon Method:"
	@echo "   Based on step response characteristics"
	@echo "   Parameters: K, T, L (gain, time constant, delay)"
	@echo "   Better for processes with significant delay"
	@echo ""
	@echo "3. Genetic Algorithm (GA) Tuning:"
	@echo "   Parameters:"
	@echo "     Population size: 20 individuals"
	@echo "     Generations: 50 iterations"
	@echo "     Mutation rate: 0.1"
	@echo "     Crossover rate: 0.8"
	@echo ""
	@echo "   Fitness Function:"
	@echo "     F = 1 / (1 + ISE + λ*|control_effort|)"
	@echo "     ISE = Integral of Squared Error"
	@echo "     λ = Control effort weighting factor"
	@echo ""
	@echo "   Advantages: Global optimization, multi-objective"
	@echo "   Disadvantages: Computationally intensive"
	@echo ""
	@echo "4. Particle Swarm Optimization (PSO):"
	@echo "   Swarm size: 20 particles"
	@echo "   Inertia weight: 0.7-0.9 (decreasing)"
	@echo "   Acceleration coefficients: c1=c2=2.0"
	@echo "   Velocity clamping: Vmax = 0.1*search_space"

# System identification
analyze-system-id:
	@echo "System Identification Analysis:"
	@echo "=============================="
	@echo ""
	@echo "Purpose:"
	@echo "  - Determine plant transfer function G(s)"
	@echo "  - Estimate system parameters"
	@echo "  - Validate control system models"
	@echo "  - Optimize controller parameters"
	@echo ""
	@echo "Test Signals:"
	@echo "  1. Step Input:"
	@echo "     - Simple to implement"
	@echo "     - Good for first-order systems"
	@echo "     - May saturate actuators"
	@echo ""
	@echo "  2. PRBS (Pseudo-Random Binary Sequence):"
	@echo "     - Rich frequency content"
	@echo "     - Good signal-to-noise ratio"
	@echo "     - Suitable for online identification"
	@echo ""
	@echo "  3. Sine Sweep (Chirp):"
	@echo "     - Frequency domain analysis"
	@echo "     - Accurate transfer function"
	@echo "     - Longer test time required"
	@echo ""
	@echo "Parameter Estimation Methods:"
	@echo "  1. Least Squares (LS):"
	@echo "     θ̂ = (XᵀX)⁻¹XᵀY"
	@echo "     - Batch processing"
	@echo "     - Optimal for linear systems"
	@echo ""
	@echo "  2. Recursive Least Squares (RLS):"
	@echo "     P(k) = P(k-1) - P(k-1)φ(k)[φᵀ(k)P(k-1)]/[1+φᵀ(k)P(k-1)]"
	@echo "     θ̂(k) = θ̂(k-1) + P(k)φ(k)[y(k)-φᵀ(k)θ̂(k-1)]"
	@echo "     - Online adaptation"
	@echo "     - Computationally efficient"
	@echo ""
	@echo "Model Structures:"
	@echo "  ARX: A(q⁻¹)y(t) = B(q⁻¹)u(t) + e(t)"
	@echo "  ARMAX: A(q⁻¹)y(t) = B(q⁻¹)u(t) + C(q⁻¹)e(t)"
	@echo "  OE: y(t) = B(q⁻¹)/F(q⁻¹)u(t) + e(t)"

# Real-time implementation
analyze-realtime:
	@echo "Real-Time Implementation Analysis:"
	@echo "================================="
	@echo ""
	@echo "Timing Requirements:"
	@echo "  Control Loop Period: 1ms (1kHz)"
	@echo "  Maximum Jitter: ±10μs (<1% of period)"
	@echo "  Interrupt Response: <5μs"
	@echo "  Context Switch: Not applicable (bare metal)"
	@echo ""
	@echo "Computational Budget (per 1ms):"
	@echo "  ADC Reading: 50μs (5%)"
	@echo "  Digital Filtering: 40μs (4%)"
	@echo "  PID Calculation: 80μs (8%)"
	@echo "  PWM Update: 20μs (2%)"
	@echo "  Telemetry: 100μs (10%)"
	@echo "  Safety Monitoring: 30μs (3%)"
	@echo "  Reserve: 680μs (68%)"
	@echo ""
	@echo "Memory Management:"
	@echo "  Stack Usage:"
	@echo "    - Main function: ~200 bytes"
	@echo "    - ISR stack: ~50 bytes"
	@echo "    - Function calls: ~100 bytes"
	@echo "    - Total: ~350 bytes (17% of 2KB RAM)"
	@echo ""
	@echo "  Heap Usage:"
	@echo "    - PID controller: 120 bytes"
	@echo "    - Digital filters: 80 bytes"
	@echo "    - Auto-tuning data: 400 bytes"
	@echo "    - Buffers: 300 bytes"
	@echo "    - Total: ~900 bytes (44% of 2KB RAM)"
	@echo ""
	@echo "Optimization Techniques:"
	@echo "  1. Fixed-Point Arithmetic:"
	@echo "     - 16.16 fixed-point format"
	@echo "     - 50% faster than floating-point"
	@echo "     - Reduced memory usage"
	@echo ""
	@echo "  2. Lookup Tables:"
	@echo "     - Trigonometric functions"
	@echo "     - Exponential/logarithmic"
	@echo "     - Fast approximations"
	@echo ""
	@echo "  3. Assembly Optimization:"
	@echo "     - Critical inner loops"
	@echo "     - Multiply-accumulate operations"
	@echo "     - Register allocation"

# Testing and validation
test-pid-system:
	@echo "PID System Testing Framework:"
	@echo "============================"
	@echo ""
	@echo "Unit Tests:"
	@echo "  1. PID Calculation Accuracy"
	@echo "     - Known input/output pairs"
	@echo "     - Numerical precision validation"
	@echo "     - Boundary condition testing"
	@echo ""
	@echo "  2. Digital Filter Response"
	@echo "     - Impulse response verification"
	@echo "     - Frequency response validation"
	@echo "     - Stability testing"
	@echo ""
	@echo "  3. Auto-Tuning Convergence"
	@echo "     - Simulated plant models"
	@echo "     - Parameter accuracy verification"
	@echo "     - Robustness to noise"
	@echo ""
	@echo "Integration Tests:"
	@echo "  1. Closed-Loop Stability"
	@echo "     - Step response characterization"
	@echo "     - Disturbance rejection testing"
	@echo "     - Load variation testing"
	@echo ""
	@echo "  2. Real-Time Performance"
	@echo "     - Timing constraint verification"
	@echo "     - CPU utilization monitoring"
	@echo "     - Memory leak detection"
	@echo ""
	@echo "  3. Communication Interface"
	@echo "     - UART command processing"
	@echo "     - Parameter update verification"
	@echo "     - Data logging accuracy"
	@echo ""
	@echo "System Tests:"
	@echo "  1. Plant Simulation"
	@echo "     - First-order system (motor)"
	@echo "     - Second-order system (mechanical)"
	@echo "     - Higher-order system (thermal)"
	@echo ""
	@echo "  2. Noise Immunity"
	@echo "     - Gaussian white noise"
	@echo "     - Periodic disturbances"
	@echo "     - Measurement dropouts"
	@echo ""
	@echo "  3. Parameter Sensitivity"
	@echo "     - Plant parameter variations"
	@echo "     - Environmental changes"
	@echo "     - Component aging effects"
	@echo ""
	@echo "Performance Metrics:"
	@echo "  - Rise time: <500ms for step input"
	@echo "  - Settling time: <2s for step input"
	@echo "  - Overshoot: <10% for well-tuned system"
	@echo "  - Steady-state error: <0.1%"
	@echo "  - Disturbance rejection: >20dB"

# Communication interface
analyze-communication:
	@echo "Communication Interface Analysis:"
	@echo "==============================="
	@echo ""
	@echo "UART Protocol (115200 baud):"
	@echo "  Command Format: ASCII text commands"
	@echo "  Response Format: Human-readable status"
	@echo "  Error Handling: Input validation and feedback"
	@echo "  Flow Control: None (suitable for short messages)"
	@echo ""
	@echo "Available Commands:"
	@echo "  Parameter Setting:"
	@echo "    sp <value>     - Set setpoint (0-100)"
	@echo "    kp <value>     - Set proportional gain"
	@echo "    ki <value>     - Set integral gain"
	@echo "    kd <value>     - Set derivative gain"
	@echo ""
	@echo "  Control Operations:"
	@echo "    tune zn        - Start Ziegler-Nichols tuning"
	@echo "    tune ga        - Start genetic algorithm tuning"
	@echo "    manual         - Switch to manual mode"
	@echo "    auto           - Switch to automatic mode"
	@echo ""
	@echo "  System Information:"
	@echo "    status         - Display current system state"
	@echo "    performance    - Show performance metrics"
	@echo "    plot           - Enable real-time data plotting"
	@echo "    save           - Save parameters to EEPROM"
	@echo "    load           - Load parameters from EEPROM"
	@echo ""
	@echo "Data Streaming:"
	@echo "  Real-time Plotting: CSV format at 100Hz"
	@echo "  Format: timestamp,setpoint,process_value,output,error"
	@echo "  Compatible with MATLAB, Python plotting tools"
	@echo ""
	@echo "Future Enhancements:"
	@echo "  - Binary protocol for higher data rates"
	@echo "  - CRC error checking for reliable communication"
	@echo "  - I2C interface for multi-controller networks"
	@echo "  - Wireless connectivity (WiFi, Bluetooth)"

# Disassembly with control focus
disasm: $(PROJECT).elf
	$(OBJDUMP) -d $(PROJECT).elf > $(PROJECT).lst
	@echo "Disassembly with PID control analysis saved to $(PROJECT).lst"
	@echo ""
	@echo "Key symbols to analyze:"
	@echo "  - main: System initialization and main control loop"
	@echo "  - TIMER1_COMPA_vect: 1ms control loop interrupt"
	@echo "  - pid_compute: Core PID algorithm implementation"
	@echo "  - digital_filter_process: Real-time filtering"
	@echo "  - auto_tune_ziegler_nichols: ZN tuning algorithm"
	@echo "  - auto_tune_genetic_algorithm: GA optimization"
	@echo "  - read_adc_oversampled: High-resolution ADC"
	@echo "  - set_pwm_output: Control signal output"

# Upload to board
upload: $(PROJECT).hex
	@echo "Uploading PID control system..."
	$(AVRDUDE) -c $(PROGRAMMER) -p $(MCU) -P $(PORT) -b $(BAUD) -U flash:w:$(PROJECT).hex:i

# Comprehensive testing
test-comprehensive:
	@echo "Comprehensive PID Testing Guide:"
	@echo "==============================="
	@echo ""
	@echo "Phase 1: Hardware Verification"
	@echo "  1. Power supply stability (±1% regulation)"
	@echo "  2. ADC linearity and noise (INL < 1 LSB)"
	@echo "  3. PWM output accuracy (±0.5% duty cycle)"
	@echo "  4. Timer interrupt precision (±1μs jitter)"
	@echo "  5. UART communication reliability"
	@echo ""
	@echo "Phase 2: Software Validation"
	@echo "  1. PID algorithm correctness"
	@echo "     - Unit step response verification"
	@echo "     - Ramp input tracking test"
	@echo "     - Sinusoidal reference following"
	@echo ""
	@echo "  2. Digital filter performance"
	@echo "     - Impulse response measurement"
	@echo "     - Frequency response validation"
	@echo "     - Phase delay verification"
	@echo ""
	@echo "  3. Auto-tuning algorithms"
	@echo "     - Convergence rate measurement"
	@echo "     - Parameter accuracy validation"
	@echo "     - Robustness to plant variations"
	@echo ""
	@echo "Phase 3: Control Performance"
	@echo "  1. Setpoint tracking"
	@echo "     - Rise time: 10%-90% measurement"
	@echo "     - Settling time: ±2% band"
	@echo "     - Overshoot percentage"
	@echo "     - Steady-state accuracy"
	@echo ""
	@echo "  2. Disturbance rejection"
	@echo "     - Load disturbance response"
	@echo "     - Input disturbance response"
	@echo "     - Measurement noise immunity"
	@echo ""
	@echo "  3. Robustness testing"
	@echo "     - Plant parameter variations (±50%)"
	@echo "     - Environmental conditions"
	@echo "     - Component aging simulation"
	@echo ""
	@echo "Phase 4: Real-time Validation"
	@echo "  1. Timing analysis"
	@echo "     - Control loop execution time"
	@echo "     - Interrupt response latency"
	@echo "     - Memory usage profiling"
	@echo ""
	@echo "  2. Long-term stability"
	@echo "     - 24-hour continuous operation"
	@echo "     - Parameter drift monitoring"
	@echo "     - Thermal cycling effects"
	@echo ""
	@echo "Expected Results:"
	@echo "  ✓ Control loop timing: <100μs execution"
	@echo "  ✓ Memory usage: <80% of available"
	@echo "  ✓ Setpoint accuracy: ±0.1% steady-state"
	@echo "  ✓ Disturbance rejection: >20dB attenuation"
	@echo "  ✓ Auto-tuning convergence: <30 seconds"

# Code quality metrics
quality-metrics:
	@echo "Code Quality Metrics:"
	@echo "===================="
	@echo ""
	@echo "Complexity Analysis:"
	@wc -l main.c
	@grep -c "^[a-zA-Z_][a-zA-Z0-9_]*.*(.*{" main.c || echo "Functions: Unknown"
	@grep -c "if\|while\|for\|switch" main.c || echo "Control structures: Unknown"
	@echo ""
	@echo "Memory Usage Estimation:"
	@echo "  Flash: ~20-24KB (62-75% of ATmega328P)"
	@echo "  SRAM: ~1.2-1.8KB (60-90% of ATmega328P)"
	@echo "  EEPROM: ~32 bytes (3% of ATmega328P)"
	@echo ""
	@echo "Performance Characteristics:"
	@echo "  Control loop frequency: 1kHz"
	@echo "  PID computation time: ~80μs"
	@echo "  Auto-tuning time: 10-30s"
	@echo "  Parameter update rate: Real-time"
	@echo ""
	@echo "Maintainability Features:"
	@echo "  - Modular function design"
	@echo "  - Comprehensive commenting"
	@echo "  - Consistent naming conventions"
	@echo "  - Clear separation of concerns"
	@echo "  - Configurable parameters"

# Clean targets
clean:
	@echo "Cleaning build files..."
	rm -f $(OBJECTS) $(PROJECT).elf $(PROJECT).hex $(PROJECT).lst $(PROJECT).map

distclean: clean
	rm -f *.o *.elf *.hex *.lst *.map

# Help
help:
	@echo "Available targets:"
	@echo "  all                      - Build the PID control system"
	@echo "  upload                   - Upload to Arduino"
	@echo "  analyze-control-theory   - Show control theory analysis"
	@echo "  benchmark-pid            - Show PID performance benchmarks"
	@echo "  analyze-applications     - Show control system applications"
	@echo "  analyze-advanced-control - Show advanced control techniques"
	@echo "  analyze-dsp             - Show digital signal processing analysis"
	@echo "  analyze-autotuning      - Show auto-tuning algorithms"
	@echo "  analyze-system-id       - Show system identification methods"
	@echo "  analyze-realtime        - Show real-time implementation analysis"
	@echo "  analyze-communication   - Show communication interface details"
	@echo "  test-pid-system         - Show PID testing framework"
	@echo "  test-comprehensive      - Show comprehensive testing guide"
	@echo "  quality-metrics         - Show code quality metrics"
	@echo "  control-analysis        - Show PID system analysis"
	@echo "  size                    - Show memory usage"
	@echo "  disasm                  - Create disassembly"
	@echo "  clean                   - Clean build files"
	@echo "  help                    - Show this help"

.PHONY: all size control-analysis disasm upload analyze-control-theory benchmark-pid analyze-applications analyze-advanced-control analyze-dsp analyze-autotuning analyze-system-id analyze-realtime analyze-communication test-pid-system test-comprehensive quality-metrics clean distclean help